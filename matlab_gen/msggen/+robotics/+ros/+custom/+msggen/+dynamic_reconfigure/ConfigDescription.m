classdef ConfigDescription < robotics.ros.Message
    %ConfigDescription MATLAB implementation of dynamic_reconfigure/ConfigDescription
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'dynamic_reconfigure/ConfigDescription' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '757ce9d44ba8ddd801bb30bc456f946f' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        DynamicReconfigureConfigClass = robotics.ros.msg.internal.MessageFactory.getClassForType('dynamic_reconfigure/Config') % Dispatch to MATLAB class for message type dynamic_reconfigure/Config
        DynamicReconfigureGroupClass = robotics.ros.msg.internal.MessageFactory.getClassForType('dynamic_reconfigure/Group') % Dispatch to MATLAB class for message type dynamic_reconfigure/Group
    end
    
    properties (Dependent)
        Max
        Min
        Dflt
        Groups
    end
    
    properties (Access = protected)
        Cache = struct('Groups', [], 'Max', [], 'Min', [], 'Dflt', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Dflt', 'Groups', 'Max', 'Min'} % List of non-constant message properties
        ROSPropertyList = {'dflt', 'groups', 'max', 'min'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ConfigDescription(msg)
            %ConfigDescription Construct the message object ConfigDescription
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function max = get.Max(obj)
            %get.Max Get the value for property Max
            if isempty(obj.Cache.Max)
                obj.Cache.Max = feval(obj.DynamicReconfigureConfigClass, obj.JavaMessage.getMax);
            end
            max = obj.Cache.Max;
        end
        
        function set.Max(obj, max)
            %set.Max Set the value for property Max
            validateattributes(max, {obj.DynamicReconfigureConfigClass}, {'nonempty', 'scalar'}, 'ConfigDescription', 'Max');
            
            obj.JavaMessage.setMax(max.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Max)
                obj.Cache.Max.setJavaObject(max.getJavaObject);
            end
        end
        
        function min = get.Min(obj)
            %get.Min Get the value for property Min
            if isempty(obj.Cache.Min)
                obj.Cache.Min = feval(obj.DynamicReconfigureConfigClass, obj.JavaMessage.getMin);
            end
            min = obj.Cache.Min;
        end
        
        function set.Min(obj, min)
            %set.Min Set the value for property Min
            validateattributes(min, {obj.DynamicReconfigureConfigClass}, {'nonempty', 'scalar'}, 'ConfigDescription', 'Min');
            
            obj.JavaMessage.setMin(min.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Min)
                obj.Cache.Min.setJavaObject(min.getJavaObject);
            end
        end
        
        function dflt = get.Dflt(obj)
            %get.Dflt Get the value for property Dflt
            if isempty(obj.Cache.Dflt)
                obj.Cache.Dflt = feval(obj.DynamicReconfigureConfigClass, obj.JavaMessage.getDflt);
            end
            dflt = obj.Cache.Dflt;
        end
        
        function set.Dflt(obj, dflt)
            %set.Dflt Set the value for property Dflt
            validateattributes(dflt, {obj.DynamicReconfigureConfigClass}, {'nonempty', 'scalar'}, 'ConfigDescription', 'Dflt');
            
            obj.JavaMessage.setDflt(dflt.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Dflt)
                obj.Cache.Dflt.setJavaObject(dflt.getJavaObject);
            end
        end
        
        function groups = get.Groups(obj)
            %get.Groups Get the value for property Groups
            if isempty(obj.Cache.Groups)
                javaArray = obj.JavaMessage.getGroups;
                array = obj.readJavaArray(javaArray, obj.DynamicReconfigureGroupClass);
                obj.Cache.Groups = feval(obj.DynamicReconfigureGroupClass, array);
            end
            groups = obj.Cache.Groups;
        end
        
        function set.Groups(obj, groups)
            %set.Groups Set the value for property Groups
            if ~isvector(groups) && isempty(groups)
                % Allow empty [] input
                groups = feval([obj.DynamicReconfigureGroupClass '.empty'], 0, 1);
            end
            
            validateattributes(groups, {obj.DynamicReconfigureGroupClass}, {'vector'}, 'ConfigDescription', 'Groups');
            
            javaArray = obj.JavaMessage.getGroups;
            array = obj.writeJavaArray(groups, javaArray, obj.DynamicReconfigureGroupClass);
            obj.JavaMessage.setGroups(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Groups)
                obj.Cache.Groups = [];
                obj.Cache.Groups = obj.Groups;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Groups = [];
            obj.Cache.Max = [];
            obj.Cache.Min = [];
            obj.Cache.Dflt = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Max = copy(obj.Max);
            cpObj.Min = copy(obj.Min);
            cpObj.Dflt = copy(obj.Dflt);
            cpObj.Groups = copy(obj.Groups);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Max = feval([obj.DynamicReconfigureConfigClass '.loadobj'], strObj.Max);
            obj.Min = feval([obj.DynamicReconfigureConfigClass '.loadobj'], strObj.Min);
            obj.Dflt = feval([obj.DynamicReconfigureConfigClass '.loadobj'], strObj.Dflt);
            GroupsCell = arrayfun(@(x) feval([obj.DynamicReconfigureGroupClass '.loadobj'], x), strObj.Groups, 'UniformOutput', false);
            obj.Groups = vertcat(GroupsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Max = saveobj(obj.Max);
            strObj.Min = saveobj(obj.Min);
            strObj.Dflt = saveobj(obj.Dflt);
            strObj.Groups = arrayfun(@(x) saveobj(x), obj.Groups);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.dynamic_reconfigure.ConfigDescription.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.dynamic_reconfigure.ConfigDescription;
            obj.reload(strObj);
        end
    end
end
