classdef ParamDescription < robotics.ros.Message
    %ParamDescription MATLAB implementation of dynamic_reconfigure/ParamDescription
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'dynamic_reconfigure/ParamDescription' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7434fcb9348c13054e0c3b267c8cb34d' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Name
        Type
        Level
        Description
        EditMethod
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Description', 'EditMethod', 'Level', 'Name', 'Type'} % List of non-constant message properties
        ROSPropertyList = {'description', 'edit_method', 'level', 'name', 'type'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ParamDescription(msg)
            %ParamDescription Construct the message object ParamDescription
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function name = get.Name(obj)
            %get.Name Get the value for property Name
            name = char(obj.JavaMessage.getName);
        end
        
        function set.Name(obj, name)
            %set.Name Set the value for property Name
            name = convertStringsToChars(name);
            
            validateattributes(name, {'char', 'string'}, {}, 'ParamDescription', 'Name');
            
            obj.JavaMessage.setName(name);
        end
        
        function type = get.Type(obj)
            %get.Type Get the value for property Type
            type = char(obj.JavaMessage.getType);
        end
        
        function set.Type(obj, type)
            %set.Type Set the value for property Type
            type = convertStringsToChars(type);
            
            validateattributes(type, {'char', 'string'}, {}, 'ParamDescription', 'Type');
            
            obj.JavaMessage.setType(type);
        end
        
        function level = get.Level(obj)
            %get.Level Get the value for property Level
            level = typecast(int32(obj.JavaMessage.getLevel), 'uint32');
        end
        
        function set.Level(obj, level)
            %set.Level Set the value for property Level
            validateattributes(level, {'numeric'}, {'nonempty', 'scalar'}, 'ParamDescription', 'Level');
            
            obj.JavaMessage.setLevel(level);
        end
        
        function description = get.Description(obj)
            %get.Description Get the value for property Description
            description = char(obj.JavaMessage.getDescription);
        end
        
        function set.Description(obj, description)
            %set.Description Set the value for property Description
            description = convertStringsToChars(description);
            
            validateattributes(description, {'char', 'string'}, {}, 'ParamDescription', 'Description');
            
            obj.JavaMessage.setDescription(description);
        end
        
        function editmethod = get.EditMethod(obj)
            %get.EditMethod Get the value for property EditMethod
            editmethod = char(obj.JavaMessage.getEditMethod);
        end
        
        function set.EditMethod(obj, editmethod)
            %set.EditMethod Set the value for property EditMethod
            editmethod = convertStringsToChars(editmethod);
            
            validateattributes(editmethod, {'char', 'string'}, {}, 'ParamDescription', 'EditMethod');
            
            obj.JavaMessage.setEditMethod(editmethod);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Name = obj.Name;
            cpObj.Type = obj.Type;
            cpObj.Level = obj.Level;
            cpObj.Description = obj.Description;
            cpObj.EditMethod = obj.EditMethod;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Name = strObj.Name;
            obj.Type = strObj.Type;
            obj.Level = strObj.Level;
            obj.Description = strObj.Description;
            obj.EditMethod = strObj.EditMethod;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Name = obj.Name;
            strObj.Type = obj.Type;
            strObj.Level = obj.Level;
            strObj.Description = obj.Description;
            strObj.EditMethod = obj.EditMethod;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.dynamic_reconfigure.ParamDescription.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.dynamic_reconfigure.ParamDescription;
            obj.reload(strObj);
        end
    end
end
